generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  name        String
  password    String
  accessLevel AccessLevel
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  evaluation  Evaluation[]
}

model Media {
  id             String         @id @default(uuid())
  title          String
  description    String
  releaseDate    DateTime
  parentalRating ParentalRating
  directorId     String
  artistsIds     String[]
  categoriesIds  String[]
  type           MediaType
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  evaluations    Evaluation[]
  director       Director       @relation(fields: [directorId], references: [id])
  mediaStats     MediaStats[]
  movie          Movie[]
  serie          Serie[]
  artists        Artist[]       @relation("ArtistToMedia")
  categories     Category[]     @relation("CategoryToMedia")
}

model Evaluation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  mediaId   String
  comment   String?
  rate      Int
  userId    String
  media     Media    @relation(fields: [mediaId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([mediaId, userId])
}

model MediaStats {
  id               String @id @default(uuid())
  mediaId          String
  average          Float
  evaluationsCount Int
  media            Media  @relation(fields: [mediaId], references: [id])
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  medias    Media[]  @relation("CategoryToMedia")
}

model Movie {
  id        String   @id @default(uuid())
  duration  Int
  mediaId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  media     Media    @relation(fields: [mediaId], references: [id])
}

model Serie {
  id        String   @id @default(uuid())
  mediaId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seasons   Season[]
  media     Media    @relation(fields: [mediaId], references: [id])
}

model Season {
  id        String    @id @default(uuid())
  serieId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  episodes  Episode[]
  serie     Serie     @relation(fields: [serieId], references: [id])
}

model Episode {
  id          String   @id @default(uuid())
  title       String
  description String
  duration    Int
  seasonId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  season      Season   @relation(fields: [seasonId], references: [id])
}

model Director {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  medias    Media[]
}

model Artist {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  medias    Media[]  @relation("ArtistToMedia")
}

enum AccessLevel {
  ADMIN
  USER
}

enum MediaType {
  MOVIE
  SERIE
}

enum ParentalRating {
  G
  PG
  PG_13
  R
  NC_17
}
